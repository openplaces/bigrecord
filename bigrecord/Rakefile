#!/usr/bin/env ruby

require 'rubygems'
require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'
require 'rake/gempackagetask'
require 'pathname'

require 'spec/rake/spectask'


DATA_STORES = ["hbase", "cassandra"]

spec = Gem::Specification.new do |s|
  s.name = 'bigrecord'
  s.author = "openplaces.org"
  s.email = "bigrecord@openplaces.org"
  s.homepage = "http://www.bigrecord.org"
  s.platform = Gem::Platform::RUBY
  s.summary = "ActiveRecord like ORM for column-oriented data stores (supports #{DATA_STORES.join(" ")})"
  s.has_rdoc = true
  s.version = "1.0"

  s.add_dependency "uuidtools", ">= 1.0.7"
  s.add_dependency "bigrecord-driver"
end

Rake::GemPackageTask.new(spec) do |package|
  package.gem_spec = spec
  package.need_tar = true
  package.need_zip = true
end

desc 'Run all tests by default'
task :default => :test

desc "Run #{DATA_STORES.join(" and ")} tests"
task :test => DATA_STORES.map{|store| "test_#{store}" }

DATA_STORES.each do |adapter|
  Rake::TestTask.new("test_#{adapter}") do |t|
    connection_path = "test/connections/#{adapter}"
    t.libs << "test" << connection_path
    t.verbose = true
  end
end

desc 'Generate documentation for the big_record plugin.'
Rake::RDocTask.new(:rdoc) do |rdoc|
  rdoc.rdoc_dir = 'rdoc'
  rdoc.title    = 'BigRecord'
  rdoc.options << '--line-numbers' << '--inline-source'
  rdoc.rdoc_files.include('README')
  rdoc.rdoc_files.include('lib/**/*.rb')
end

ROOT = Pathname(__FILE__).dirname.expand_path

desc "Run #{DATA_STORES.join(" and ")} specs"
task :spec => DATA_STORES.map{|store| "spec:#{store}" }

namespace :spec do
  unit_specs        = ROOT + 'spec/unit/**/*_spec.rb'
  integration_specs = ROOT + 'spec/integration/**/*_spec.rb'
  all_specs         = ROOT + 'spec/**/*_spec.rb'

  def run_spec(name, adapter, files, rcov)
    Spec::Rake::SpecTask.new(name) do |t|
      t.spec_opts << File.open("spec/spec.opts").readlines.map{|x| x.chomp}
      t.spec_files = Pathname.glob(files.to_s).map { |f| f.to_s }
      connection_path = "spec/connections/#{adapter}"
      t.libs << "spec" << connection_path
    end
  end

  DATA_STORES.each do |adapter|
    task adapter.to_sym => "spec:#{adapter}:all"

    namespace adapter.to_sym do

      desc "Run all specifications"
      run_spec('all', adapter, all_specs, false)

      desc "Run unit specifications"
      run_spec('unit', adapter, unit_specs, false)

      desc "Run integration specifications"
      run_spec('integration', adapter, integration_specs, false)

    end
  end
end

namespace :data_store do
  require 'lib/big_record'
  BigRecord::Base.configurations = YAML::load(File.open(File.join(File.dirname(__FILE__), "spec", "connections", "bigrecord.yml")))
  BigRecord::Base.logger = Logger.new(File.expand_path(File.join(File.dirname(__FILE__), "migrate.log")))

  @migrations_path = File.expand_path(File.join(File.dirname(__FILE__), "spec", "lib", "migrations"))

  desc 'Migrate the test schema for the data store specified by ENV=<data_store>'
  task :migrate do
    environment = ENV['ENV']
    raise ArgumentError, "Usage: rake data_store:migrate ENV=<hbase | cassandra>" unless environment

    BigRecord::Base.establish_connection environment

    BigRecord::Migrator.migrate(@migrations_path, ENV["VERSION"] ? ENV["VERSION"].to_i : nil)
  end

  namespace :migrate do
    desc 'Runs the "up" for a given migration VERSION.'
    task :up do
      environment = ENV['ENV']
      raise ArgumentError, "Usage: rake data_store:migrate:up ENV=<hbase | cassandra>" unless environment

      BigRecord::Base.establish_connection environment

      version = ENV["VERSION"] ? ENV["VERSION"].to_i : nil
      raise "VERSION is required" unless version

      BigRecord::Migrator.run(:up, @migrations_path, version)
    end

    desc 'Runs the "down" for a given migration VERSION.'
    task :down do
      environment = ENV['ENV']
      raise ArgumentError, "Usage: rake data_store:migrate:down ENV=<hbase | cassandra>" unless environment

      BigRecord::Base.establish_connection environment

      version = ENV["VERSION"] ? ENV["VERSION"].to_i : nil
      raise "VERSION is required" unless version

      BigRecord::Migrator.run(:down, @migrations_path, version)
    end
  end

end